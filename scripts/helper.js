// Helper JavaScript functions for n8n workflow

/**
 * Parse WhatsApp message from Twilio webhook
 * @param {Object} webhookData - Raw webhook data from Twilio
 * @returns {Object} Parsed command data
 */
function parseWhatsAppMessage(webhookData) {
  const body = webhookData.Body || '';
  const from = webhookData.From || '';
  const messageId = webhookData.MessageSid || '';
  
  // Extract command and path
  const command = body.trim().toUpperCase();
  const parts = command.split(' ');
  const action = parts[0];
  const path = parts[1] || '/';
  const destination = parts[2] || '';
  
  console.log(`Message from ${from}: ${body}`);
  
  const validCommands = ['LIST', 'DELETE', 'MOVE', 'SUMMARY', 'HELP'];
  
  if (!validCommands.includes(action)) {
    return {
      from,
      messageId,
      error: true,
      message: `❌ Unknown command: ${action}\\n\\nSupported commands:\\n📋 LIST /folder\\n🗑️ DELETE /folder/file.txt\\n📁 MOVE /file.txt /destination\\n📄 SUMMARY /folder\\n❓ HELP`
    };
  }
  
  return {
    from,
    messageId,
    action,
    path: path.startsWith('/') ? path : '/' + path,
    destination: destination.startsWith('/') ? destination : '/' + destination,
    originalMessage: body,
    error: false
  };
}

/**
 * Format Google Drive file list for WhatsApp response
 * @param {Array} files - Array of Google Drive file objects
 * @param {string} path - Folder path
 * @returns {Object} Formatted response
 */
function formatFileListResponse(files, path) {
  if (files.length === 0) {
    return {
      message: `📁 Folder: ${path}\\n\\n❌ No files found or folder doesn't exist.`
    };
  }
  
  let response = `📁 Folder: ${path}\\n\\n`;
  
  files.forEach((file, index) => {
    const size = file.size ? `(${Math.round(file.size / 1024)}KB)` : '';
    const type = file.mimeType.includes('folder') ? '📁' : '📄';
    const modifiedDate = new Date(file.modifiedTime).toLocaleDateString();
    
    response += `${type} ${file.name} ${size}\\n`;
    response += `   Modified: ${modifiedDate}\\n\\n`;
  });
  
  response += `\\n📊 Total files: ${files.length}`;
  
  return { message: response };
}

/**
 * Format delete confirmation message
 * @param {string} path - File path that was deleted
 * @returns {Object} Formatted response
 */
function formatDeleteResponse(path) {
  const fileName = path.split('/').pop();
  
  return {
    message: `✅ File deleted successfully!\\n\\n🗑️ ${fileName}\\n\\n⚠️ This action cannot be undone.`
  };
}

/**
 * Format AI summary response
 * @param {Object} summaryData - AI response data
 * @param {string} path - File path
 * @returns {Object} Formatted response
 */
function formatSummaryResponse(summaryData, path) {
  const fileName = path.split('/').pop();
  
  let summary = '';
  if (summaryData.candidates && summaryData.candidates[0]) {
    summary = summaryData.candidates[0].content.parts[0].text;
  }
  
  return {
    message: `📄 Summary of: ${fileName}\\n\\n${summary}\\n\\n🤖 Generated by Gemini AI`
  };
}

/**
 * Generate help message
 * @returns {Object} Help message
 */
function generateHelpMessage() {
  const helpMessage = `🤖 WhatsApp Drive Assistant\\n\\nAvailable Commands:\\n\\n📋 LIST /folder\\n   List all files in a folder\\n   Example: LIST /ProjectX\\n\\n🗑️ DELETE /path/file.ext\\n   Delete a specific file\\n   Example: DELETE /ProjectX/report.pdf\\n\\n📁 MOVE /source /destination\\n   Move file to another location\\n   Example: MOVE /ProjectX/file.pdf /Archive\\n\\n📄 SUMMARY /path/file.ext\\n   Get AI summary of document\\n   Example: SUMMARY /ProjectX/report.pdf\\n\\n❓ HELP\\n   Show this help message\\n\\n⚠️ Safety Tips:\\n• Double-check paths before DELETE\\n• Use CONFIRM DELETE for confirmation\\n• All actions are logged for audit`;
  
  return { message: helpMessage };
}

/**
 * Create audit log entry
 * @param {Object} commandData - Parsed command data
 * @returns {Object} Audit log entry
 */
function createAuditLogEntry(commandData) {
  const timestamp = new Date().toISOString();
  
  return {
    timestamp,
    from: commandData.from,
    action: commandData.action,
    path: commandData.path,
    success: !commandData.error,
    message: commandData.originalMessage
  };
}

/**
 * Validate file path
 * @param {string} path - File or folder path
 * @returns {boolean} True if valid path
 */
function validatePath(path) {
  // Basic path validation
  if (!path || typeof path !== 'string') {
    return false;
  }
  
  // Check for dangerous patterns
  const dangerousPatterns = ['../', '../', '~/', '/root/', '/etc/'];
  return !dangerousPatterns.some(pattern => path.includes(pattern));
}

/**
 * Extract file ID from Google Drive path
 * @param {string} path - Google Drive file path
 * @returns {string} File ID
 */
function extractFileId(path) {
  // This is a simplified version - in practice, you'd need to
  // maintain a mapping between paths and file IDs
  return path.split('/').pop();
}

/**
 * Get file MIME type for summary compatibility
 * @param {string} fileName - File name
 * @returns {string} MIME type
 */
function getFileMimeType(fileName) {
  const extension = fileName.split('.').pop().toLowerCase();
  
  const mimeTypes = {
    'pdf': 'application/pdf',
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'doc': 'application/msword',
    'txt': 'text/plain',
    'csv': 'text/csv',
    'md': 'text/markdown'
  };
  
  return mimeTypes[extension] || 'application/octet-stream';
}

/**
 * Check if file is summarizable
 * @param {string} mimeType - File MIME type
 * @returns {boolean} True if file can be summarized
 */
function isSummarizable(mimeType) {
  const summarizableTypes = [
    'application/pdf',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/msword',
    'text/plain',
    'text/csv',
    'text/markdown'
  ];
  
  return summarizableTypes.includes(mimeType);
}

/**
 * Sanitize WhatsApp message content
 * @param {string} message - Raw message
 * @returns {string} Sanitized message
 */
function sanitizeMessage(message) {
  // Remove potentially harmful content
  return message
    .replace(/[<>]/g, '') // Remove HTML-like tags
    .replace(/javascript:/gi, '') // Remove javascript URLs
    .substring(0, 1000); // Limit message length
}

// Export functions for use in n8n
module.exports = {
  parseWhatsAppMessage,
  formatFileListResponse,
  formatDeleteResponse,
  formatSummaryResponse,
  generateHelpMessage,
  createAuditLogEntry,
  validatePath,
  extractFileId,
  getFileMimeType,
  isSummarizable,
  sanitizeMessage
};